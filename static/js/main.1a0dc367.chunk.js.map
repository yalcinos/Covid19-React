{"version":3,"sources":["components/Cards/Card.js","components/Chart/Chart.js","components/Country/County.js","api/index.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["useStyles","makeStyles","theme","container","margin","breakpoints","down","deaths","borderBlockWidth","borderBottom","marginLeft","confirmed","recovered","Cards","props","data","isLoading","classes","className","Typography","patientStatus","Object","keys","slice","statisticData","Grid","spacing","justify","map","status","index","key","item","component","Card","xs","md","CardContent","color","gutterBottom","variant","start","end","value","duration","separator","Date","lastUpdate","toDateString","renderCardByType","chartContainer","display","justifyContent","width","Chart","dataDaily","country","lineChart","labels","reportDate","datasets","total","label","borderColor","options","title","text","resultType","console","log","length","undefined","backgroundColor","legend","renderGraphByCountry","formControl","minWidth","selectEmpty","marginTop","Country","onChangeOption","FormControl","InputLabel","htmlFor","Select","onChange","event","target","native","inputProps","name","id","aria-label","url","fetchData","a","dynamicUrl","axios","get","filterData","fetchDailyData","response","fetchCountries","countries","App","useState","covidData","setcovidData","loading","setLoading","dailyData","setDailyData","countriesData","setCountriesData","setCountry","useEffect","fetchAPIData","dailyCases","countryList","handleOnChangeDropDown","responseCountry","styles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.1a0dc367.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cn from \"classnames\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    margin: \"50px 0\",\n    [theme.breakpoints.down(\"sm\")]: {\n      margin: \"0 30px\",\n    },\n  },\n\n  deaths: {\n    borderBlockWidth: 10,\n    borderBottom: \"10px solid tomato\",\n    marginLeft: \"4%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      margin: \"5% 0\",\n    },\n  },\n  confirmed: {\n    borderBlockWidth: 10,\n    borderBottom: \"10px solid green\",\n    marginLeft: \"4%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      margin: \"5% 0\",\n    },\n  },\n\n  recovered: {\n    borderBlockWidth: 10,\n    borderBottom: \"10px solid blue\",\n    marginLeft: \"4%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      margin: \"5% 0\",\n    },\n  },\n}));\n\n//Card Component\nconst Cards = (props) => {\n  const { data, isLoading } = props;\n  //we pass our pross to useStyle for conditional rendering\n  const classes = useStyles();\n\n  //Render Card by type\n  const renderCardByType = () => {\n    const resultType = Object.keys(data.data);\n    let patientStatus = resultType.slice(0, 3);\n\n    const statisticData = data.data;\n\n    return (\n      <Grid container spacing={3} justify=\"center\">\n        {patientStatus.map((status, index) => {\n          return (\n            <Grid\n              key={index}\n              item\n              component={Card}\n              xs={12}\n              md={3}\n              className={\n                status === \"deaths\"\n                  ? classes.deaths\n                  : status === \"confirmed\"\n                  ? classes.confirmed\n                  : classes.recovered\n              }\n            >\n              <Grid container justify={\"center\"} spacing={3}>\n                <CardContent>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    {status}\n                  </Typography>\n                  <Typography variant=\"h5\" gutterBottom>\n                    <CountUp\n                      start={0}\n                      end={statisticData[status].value}\n                      duration={2.5}\n                      separator=\",\"\n                    />\n                  </Typography>\n                  <Typography color=\"textSecondary\">\n                    {new Date(statisticData.lastUpdate).toDateString()}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Number of {status} cases of Covid-19\n                  </Typography>\n                </CardContent>\n              </Grid>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  };\n  return (\n    <div className={classes.container}>\n      {isLoading ? <Typography>Loading...</Typography> : renderCardByType()}\n    </div>\n  );\n};\n\nexport default Cards;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  chartContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    width: \"85%\",\n  },\n});\n\nconst Chart = (props) => {\n  const classes = useStyles();\n  const { dataDaily, data, isLoading, country } = props;\n\n  const lineChart = dataDaily[0] ? (\n    <Line\n      data={{\n        labels: dataDaily.map((data) => data.reportDate),\n        datasets: [\n          {\n            data: dataDaily.map((data) => data.confirmed.total),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n          },\n          {\n            data: dataDaily.map((data) => data.deaths.total),\n            label: \"Deaths\",\n            borderColor: \"red\",\n          },\n        ],\n      }}\n      options={{\n        title: { display: true, text: `Current Status in the world` },\n      }}\n    />\n  ) : null;\n\n  const renderGraphByCountry = () => {\n    const resultType = Object.keys(data.data);\n    const statisticData = data.data;\n    console.log(statisticData.confirmed.value);\n    return resultType.length || country !== undefined ? (\n      <Bar\n        data={{\n          labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n          datasets: [\n            {\n              label: \"People\",\n              backgroundColor: [\n                \"rgb(255, 0, 0)\",\n                \"rgb(0, 204, 102)\",\n                \"rgb(0, 102, 204)\",\n              ],\n              data: [\n                statisticData.confirmed.value,\n                statisticData.recovered.value,\n                statisticData.deaths.value,\n              ],\n            },\n          ],\n        }}\n        options={{\n          legend: { display: false },\n          title: { display: true, text: `Current Status in ${country}` },\n        }}\n      />\n    ) : null;\n  };\n\n  //Render\n  return (\n    <div className={classes.chartContainer}>\n      {isLoading ? (\n        <Typography>Loading...</Typography>\n      ) : country ? (\n        renderGraphByCountry()\n      ) : (\n        lineChart\n      )}\n    </div>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst Country = (props) => {\n  const classes = useStyles();\n  const { data, onChangeOption } = props;\n\n  const renderSelectOption = () => {\n    const countryList =\n      data.length !== 0\n        ? data.map((country, index) => {\n            return <option value={country.name}>{country.name}</option>;\n          })\n        : null;\n    return countryList;\n  };\n\n  return (\n    <FormControl className={classes.formControl}>\n      <InputLabel htmlFor=\"age-native-simple\">Countries</InputLabel>\n      <Select\n        onChange={(event) => {\n          onChangeOption(event.target.value);\n        }}\n        native\n        inputProps={{\n          name: \"Countries\",\n          id: \"age-native-simple\",\n        }}\n      >\n        <option aria-label=\"None\" value=\"\" />\n        {renderSelectOption()}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default Country;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let dynamicUrl = url;\n  if (country) {\n    dynamicUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(dynamicUrl);\n\n    const filterData = {\n      confirmed: confirmed,\n      recovered: recovered,\n      deaths: deaths,\n      lastUpdate: lastUpdate,\n    };\n\n    return filterData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const response = axios.get(`${url}/daily`);\n    return response;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries;\n  } catch (error) {\n    return error;\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport { Cards, Chart, Country } from \"./components\";\nimport { fetchData, fetchDailyData, fetchCountries } from \"./api\";\nimport { Typography } from \"@material-ui/core\";\n\nfunction App() {\n  const [covidData, setcovidData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [dailyData, setDailyData] = useState([]);\n  const [countriesData, setCountriesData] = useState([]);\n  const [country, setCountry] = useState();\n\n  useEffect(() => {\n    fetchAPIData();\n    dailyCases();\n    countryList();\n  }, []);\n\n  const fetchAPIData = async () => {\n    const response = await fetchData();\n\n    setcovidData({ data: response });\n    if (response !== undefined || response != null) {\n      setLoading(false);\n    }\n  };\n  const handleOnChangeDropDown = async (country) => {\n    const responseCountry = await fetchData(country);\n    setCountry(country);\n\n    setcovidData({ data: responseCountry });\n  };\n  const dailyCases = async () => {\n    const response = await fetchDailyData();\n    const data = response.data;\n    setDailyData(data);\n  };\n  const countryList = async () => {\n    const response = await fetchCountries();\n    setCountriesData(response);\n  };\n  return (\n    <div className={styles.container}>\n      <Typography variant={\"h3\"}>COVID-19 TRACKER APP</Typography>\n      <Cards data={covidData} isLoading={loading} />\n      <Country onChangeOption={handleOnChangeDropDown} data={countriesData} />\n      <Chart\n        dataDaily={dailyData}\n        data={covidData}\n        isLoading={loading}\n        country={country}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}